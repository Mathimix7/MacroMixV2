def startDiscord(settings, path):
    user = settings["user"]
    import pypresence
    import requests
    import os
    import json
    with open(os.path.join(path, "discordUsers.json"), "r") as f:
        dataDiscord = json.load(f)
    token = None
    for userdata in dataDiscord:
        print(userdata)
        if userdata["name"] == user:
            token = userdata["access_token"]
            refreshToken = userdata["refresh_token"]
    print(user, userdata["name"], token)

    client_id = '1036765948302069830'
    client_secret = "lyEVHyneRoaS8isqXnNxhbd3hiF2Bcfp"
    API_ENDPOINT = 'https://discord.com/api/v10'

    def refresh_token(refresh_token):
        data = {
            'client_id': client_id,
            'client_secret': client_secret,
            'grant_type': 'refresh_token',
            'refresh_token': refresh_token
        }
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        try:
            r = requests.post('%s/oauth2/token' % API_ENDPOINT, data=data, headers=headers, timeout=3)
            print(r.json())
            print("============")
            access_token, refresh_token = r.json()["access_token"], r.json()["refresh_token"]
        except Exception as e:
            print(e)
            access_token = token
        return access_token, refresh_token
    
    if token:
        client = pypresence.Client(client_id)
        client.start()
        def get_data(access_token):
            headers = {
                'Authorization': f'Bearer {access_token}' 
            }
            r = requests.get("https://discord.com/api/v6/users/@me", headers=headers)
            return r
        if get_data(token).ok:
            client.authenticate(token)
        else:
            token, refresh = refresh_token(refreshToken)
            if get_data(token).ok:
                client.authenticate(token)
                for i,userdata in enumerate(dataDiscord):
                    if userdata["name"] == user:
                        dataDiscord[i]["access_token"] = token
                        dataDiscord[i]["refresh_token"] = refresh
                with open(os.path.join(path, "discordUsers.json"), "w") as f:
                    json.dump(dataDiscord, f)
    return client

if __name__ == "__main__":

    def save(func):
        import marshal, os
        file_name, _ = os.path.splitext(os.path.basename(__file__))
        code_string = marshal.dumps(func.__code__)
        with open(f'{file_name}.marshal', 'wb') as file:
            marshal.dump(code_string, file)
            
            
    save(startDiscord)
    # print(startDiscord({'user': 'Mathimix#4678'}, "site-packages\discord-integration"))